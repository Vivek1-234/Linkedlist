//  program of  cirular linked list --->>>> 
// 1st --->>>  to make a circular linked list --->>>> insertat tail--->>>>>

// 2nd --->>   to make insertion at the head  -->>>>>

// 3rd --->>>  to make deletion at head --->>>>>

// 4th -->>> to make deltion at any position -->>>>>

#include<iostream>
using namespace std;     
class node{

    public:
    int data;
    node* next;

    node(int val){
        data = val;
        next =NULL;
    }
};


 //  insertion at head ---->>>>>

void insertionathead(node* &head , int val ){
    node* n = new node(val);
      if(head==NULL){
        n->next=n ;     
        head=n;
        return ;
    }
    
    node* temp = head;
    while(temp->next!=head){
     temp = temp->next ;
    }
   
   temp->next = n ; 
   n->next = head ;
   head = n ;

}

//  insert at tail--->>>>>>


void insertattail(node* &head , int val){
    node* n  = new node(val);

    if(head==NULL){
        n->next=n ;     
        head=n;
        return ;
    }
    node* temp = head;

    while(temp->next!=head){
   temp =temp->next;
    }
    temp->next = n;
    n->next = head;

}

void display(node* head){
    node* temp = head;
    do{
      cout<<temp->data<<" ";
      temp = temp->next;
    }while(temp!= head);
    cout<<endl;
    }


//  deletion at head --->>>>

void deletionathead(node* &head ){
    node* temp =  head;
    if(head==NULL){
        return ;
    }

    while(temp->next!=head){
        temp = temp->next;
    }
   
   node* todelete = temp->next;
   temp->next = head->next;
   head = head->next;

   delete todelete;
}

// deletion ---->>>>>>  at any position only left out head ---->>>>>>


void deletion(node* &head , int pos){
    if(pos==1){
        deletionathead(head);
        return ;        
      }
      node* temp = head;
      int count = 1 ;
      while(  count!=pos-1){
         temp = temp->next ;    
         count++;
      }
      node* todelete = temp->next;
     temp->next = temp->next->next;

      delete todelete;
}


int main(){
node* head =NULL;
insertattail(head , 1);
insertattail(head , 2);
insertattail(head , 3);
insertattail(head , 4);
insertattail(head , 5);
insertattail(head , 6);
insertattail(head , 7);

display(head);

//  insertion at head --->>>>

insertionathead(head , 9);
display(head);

//  deletion at head and any position --->>>>


deletion(head , 8);
 display(head);

//  deletion at head --->>>

deletionathead(head);
display(head);


return 0;
 }
